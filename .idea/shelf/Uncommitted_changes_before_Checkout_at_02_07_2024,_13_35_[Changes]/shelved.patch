Index: app/src/main/java/org/dci/walletapp/JsonFilesOperations.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.dci.walletapp;\nimport android.content.Context;\nimport android.content.ContextWrapper;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class JsonFilesOperations {\n    private static JsonFilesOperations instance;\n\n    private JsonFilesOperations() {\n\n    }\n\n    public static JsonFilesOperations getInstance() {\n        if (instance == null) {\n            instance = new JsonFilesOperations();\n        }\n        return instance;\n    }\n\n    public void writeTransaction(Context context, Transaction transaction) {\n        String data = convertTransaction(transaction).toString();\n\n        ContextWrapper contextWrapper = new ContextWrapper(context);\n        File directory = contextWrapper.getDir(context.getFilesDir().getName(), Context.MODE_PRIVATE);\n        File file =  new File(directory, \"transaction.json\");\n\n        try (FileOutputStream fos = new FileOutputStream(file, true)) {\n            fos.write(data.getBytes());\n        }  catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private JSONObject convertTransaction(Transaction transaction) {\n        JSONObject jsonObject = new JSONObject();\n        try {\n            jsonObject.put(\"isIncome\", String.valueOf(transaction.isIncome()));\n            jsonObject.put(\"amount\", transaction.getAmount());\n            jsonObject.put(\"dateTime\", transaction.getDateTime());\n            jsonObject.put(\"incomeSource\", transaction.getSource());\n            jsonObject.put(\"description\", transaction.getDescription());\n        } catch (JSONException e) {\n            throw new RuntimeException(e);\n        }\n\n        return jsonObject;\n    }\n}
===================================================================
diff --git a/app/src/main/java/org/dci/walletapp/JsonFilesOperations.java b/app/src/main/java/org/dci/walletapp/JsonFilesOperations.java
--- a/app/src/main/java/org/dci/walletapp/JsonFilesOperations.java	
+++ b/app/src/main/java/org/dci/walletapp/JsonFilesOperations.java	
@@ -2,12 +2,20 @@
 import android.content.Context;
 import android.content.ContextWrapper;
 
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.List;
 
 public class JsonFilesOperations {
     private static JsonFilesOperations instance;
@@ -23,8 +31,13 @@
         return instance;
     }
 
-    public void writeTransaction(Context context, Transaction transaction) {
-        String data = convertTransaction(transaction).toString();
+    public void writeTransaction(Context context, List<Transaction> transactionsList) {
+
+        StringBuilder sb = new StringBuilder('{');
+        for (Transaction transaction : transactionsList) {
+            sb.append(convertTransaction(transaction));
+        }
+        sb.append('}');
 
         ContextWrapper contextWrapper = new ContextWrapper(context);
         File directory = contextWrapper.getDir(context.getFilesDir().getName(), Context.MODE_PRIVATE);
@@ -37,6 +50,29 @@
         }
     }
 
+    public List<Transaction> readTransactions(Context context) {
+        ContextWrapper contextWrapper = new ContextWrapper(context);
+        File directory = contextWrapper.getDir(context.getFilesDir().getName(), Context.MODE_PRIVATE);
+        File file =  new File(directory, "transaction.json");
+        List<Transaction> transactionsList = new ArrayList<>();
+        try (InputStream stream = Files.newInputStream(file.toPath())) {
+            JsonNode rootNode = new ObjectMapper().readTree(stream);
+
+            for (JsonNode transaction : rootNode) {
+                transactionsList.add(new Transaction(
+                        transaction.get("amount").asDouble(),
+                        LocalDateTime.parse(transaction.get("dateTime").asText()),
+                        transaction.get("description").asText(),
+                        transaction.get("isIncome").asBoolean(),
+                        transaction.get("source").asText()
+                ));
+            }
+        } catch (IOException e) {
+            return new ArrayList<Transaction>();
+        }
+        return transactionsList;
+    }
+
     private JSONObject convertTransaction(Transaction transaction) {
         JSONObject jsonObject = new JSONObject();
         try {
